service: ${env:STACK_NAME}-${env:SUBDOMAIN}-shared-acm-cert

useDotenv: true

plugins:
  - serverless-certificate-creator

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 300
  memorySize: 128
  region: ${env:REGION}
  stage: ${env:ENV}


custom:
  domains:
    API: 'api.${env:PUBLICZONENAME}'
    APP: 'app.${env:PUBLICZONENAME}'
  customCertificate:
      certificateName: '${self:custom.domains.${env:SERVICETYPE}}'
      hostedZoneName: '${env:PUBLICZONENAME}'
      hostedZoneId: '${env:PUBLICZONEID}'
      region: '${env:CUSTOMREGION}'
      subjectAlternativeNames : 
        - '*.${env:PUBLICZONENAME}'
      rewriteRecords: true


resources:
  Conditions:
    APIREGION: !Equals ['${env:SERVICETYPE}', 'API']
    APPREGION: !Not [!Equals ['${env:SERVICETYPE}','APP']]
    HasNot: !Equals ['true', 'false']
  Resources:
    NullResource:
      Type: 'Custom::NullResource'
      Condition: HasNot
  Outputs:
    APISharedACMCertificateArn:
      Condition: APIREGION
      Description: 'The ARN of shared ACM certification for API gateway custom domains'
      Value: ${certificate:${self:custom.customCertificate.certificateName}:CertificateArn}
      Export:
        Name: ${env:STACK_NAME}-APISharedACMCertificateArn-${env:ENV}
    APPSharedACMCertificateArn:
      Condition: APPREGION
      Description: 'The ARN of shared ACM certification for CORE, APP services'
      Value: ${certificate:${self:custom.customCertificate.certificateName}:CertificateArn}
      Export:
        Name: ${env:STACK_NAME}-APPSharedACMCertificateArn-${env:ENV}
