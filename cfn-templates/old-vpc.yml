AWSTemplateFormatVersion: '2010-09-09'
Description: This is VPC cloudformation template for core Practera infrastructure
  design.
Metadata:
  Authors:
    Description: Sunil and Mihai (sunil@practera.com/mihai@practera.com) based on
      AWS quickstart/widdix and best practise.
  License:
    Description: Copyright 2020 Intersective PTY LTD and its affiliates. All Rights
      Reserved.
Parameters:
  StackName:
    ConstraintDescription: This will be unique string to represent our stack.
    Default: practera
    Description: A client/project/product unique name for the stack to idnetify later.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens
      (-). It cannot start or end with a hyphen (-).
    Type: String
  Env:
    Description: Environment type.
    Default: live
    Type: String
    AllowedValues:
      - sandbox
      - stage
      - live
    ConstraintDescription: must specify sandbox,stage,live.
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  CreateAdditionalPrivateSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Set to true to create a network ACL protected subnet in each Availability
      Zone. If false, the CIDR parameters for those subnets will be ignored. If true,
      it also requires that the 'Create private subnets' parameter is also true to
      have any effect.
    Type: String
  CreateNATGateways:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false when creating only private subnets. If True, both CreatePublicSubnets
      and CreatePrivateSubnets must also be true.
    Type: String
  CreateVPCS3Endpoint:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false when creating only private subnets. If True, both CreatePublicSubnets
      and CreatePrivateSubnets must also be true.
    Type: String
  CreateVPCDynamoDBEndpoint:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Set to false when creating only private subnets. If True, both CreatePublicSubnets
      and CreatePrivateSubnets must also be true.
    Type: String
  CreateVPCFlowLogs:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Set to false when creating only private subnets. If True, both CreatePublicSubnets
      and CreatePrivateSubnets must also be true.
    Type: String
  CreatePublicSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false to create only private subnets. If false, CreatePrivateSubnets
      must be True and the CIDR parameters for ALL public subnets will be ignored
    Type: String
  CreatePrivateSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Set to false to create only public subnets. If false, the CIDR parameters
      for ALL private subnets will be ignored.
    Type: String
  NumberOfAZs:
    AllowedValues:
      - '2'
      - '3'
      - '4'
      - '5'
      - '6'
    Default: '3'
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String
  PrivateSubnet1ACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1A located in Availability Zone 1
    Type: String
  PrivateSubnet1BCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.192.0/21
    Description: CIDR block for private subnet 1B with dedicated network ACL located
      in Availability Zone 1
    Type: String
  PrivateSubnet2ACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2A located in Availability Zone 2
    Type: String
  PrivateSubnet2BCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.200.0/21
    Description: CIDR block for private subnet 2B with dedicated network ACL located
      in Availability Zone 2
    Type: String
  PrivateSubnet3ACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.64.0/19
    Description: CIDR block for private subnet 3A located in Availability Zone 3
    Type: String
  PrivateSubnet3BCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.208.0/21
    Description: CIDR block for private subnet 3B with dedicated network ACL located
      in Availability Zone 3
    Type: String
  PrivateSubnet4ACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.96.0/19
    Description: CIDR block for private subnet 4A located in Availability Zone 4
    Type: String
  PrivateSubnet4BCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.216.0/21
    Description: CIDR block for private subnet 4B with dedicated network ACL located
      in Availability Zone 4
    Type: String
  PrivateSubnet5ACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/19
    Description: CIDR block for private subnet 5A located in Availability Zone 5
    Type: String
  PrivateSubnet5BCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.224.0/21
    Description: CIDR block for private subnet 5B with dedicated network ACL located
      in Availability Zone 5
    Type: String
  PrivateSubnet6ACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.160.0/19
    Description: CIDR block for private subnet 6A located in Availability Zone 6
    Type: String
  PrivateSubnet6BCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.236.0/21
    Description: CIDR block for private subnet 6B with dedicated network ACL located
      in Availability Zone 6
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone
      1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public DMZ subnet 2 located in Availability Zone
      2
    Type: String
  PublicSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.160.0/20
    Description: CIDR block for the public DMZ subnet 3 located in Availability Zone
      3
    Type: String
  PublicSubnet4CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.176.0/20
    Description: CIDR block for the public DMZ subnet 4 located in Availability Zone
      4
    Type: String
  PublicSubnet5CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.192.0/20
    Description: CIDR block for the public DMZ subnet 5 located in Availability Zone
      5
    Type: String
  PublicSubnet6CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.208.0/20
    Description: CIDR block for the public DMZ subnet 6 located in Availability Zone
      6
    Type: String
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
  RetentionInDays:
    Description: Specifies the number of days you want to retain log events.
    Type: Number
    Default: 180
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
  TrafficType:
    Description: The type of traffic to log.
    Type: String
    Default: REJECT
    AllowedValues:
      - ACCEPT
      - REJECT
      - ALL
Rules:
  NAT:
    RuleCondition: !Equals
      - !Ref 'CreateNATGateways'
      - 'true'
    Assertions:
      - Assert: !And
          - !Equals
            - !Ref 'CreatePrivateSubnets'
            - 'true'
          - !Equals
            - !Ref 'CreatePublicSubnets'
            - 'true'
        AssertDescription: To enable NAT gateways you must have both CreatePrivateSubnets
          and CreatePublicSubnets set to 'true'
  VPCS3Endpoint:
    RuleCondition: !Equals
      - !Ref 'CreateVPCS3Endpoint'
      - 'true'
    Assertions:
      - Assert: !And
          - !Equals
            - !Ref 'CreatePrivateSubnets'
            - 'true'
          - !Equals
            - !Ref 'CreatePublicSubnets'
            - 'true'
        AssertDescription: To enable VPC S3 Endpoint you must have both CreatePrivateSubnets
          and CreatePublicSubnets set to 'true'
  VPCDynamoDBEndpoint:
    RuleCondition: !Equals
      - !Ref 'CreateVPCDynamoDBEndpoint'
      - 'true'
    Assertions:
      - Assert: !And
          - !Equals
            - !Ref 'CreatePrivateSubnets'
            - 'true'
          - !Equals
            - !Ref 'CreatePublicSubnets'
            - 'true'
        AssertDescription: To enable VPC DynamoDB Endpoint you must have both CreatePrivateSubnets
          and CreatePublicSubnets set to 'true'
  Subnets:
    Assertions:
      - Assert: !Or
          - !Equals
            - !Ref 'CreatePrivateSubnets'
            - 'true'
          - !Equals
            - !Ref 'CreatePublicSubnets'
            - 'true'
        AssertDescription: At least one of CreatePublicSubnets or CreatePrivateSubnets
          must be set to 'true'
Conditions:
  3AZCondition: !Or
    - !Equals
      - !Ref 'NumberOfAZs'
      - '3'
    - !Condition '4AZCondition'
  4AZCondition: !Or
    - !Equals
      - !Ref 'NumberOfAZs'
      - '4'
    - !Condition '5AZCondition'
  5AZCondition: !Or
    - !Equals
      - !Ref 'NumberOfAZs'
      - '5'
    - !Condition '6AZCondition'
  6AZCondition: !Equals
    - !Ref 'NumberOfAZs'
    - '6'
  CreatePrivateSubnetsCondition: !Equals
    - !Ref 'CreatePrivateSubnets'
    - 'true'
  AdditionalPrivateSubnetsCondition: !And
    - !Equals
      - !Ref 'CreatePrivateSubnets'
      - 'true'
    - !Equals
      - !Ref 'CreateAdditionalPrivateSubnets'
      - 'true'
  AdditionalPrivateSubnets&3AZCondition: !And
    - !Condition 'AdditionalPrivateSubnetsCondition'
    - !Condition '3AZCondition'
  AdditionalPrivateSubnets&4AZCondition: !And
    - !Condition 'AdditionalPrivateSubnetsCondition'
    - !Condition '4AZCondition'
  AdditionalPrivateSubnets&5AZCondition: !And
    - !Condition 'AdditionalPrivateSubnetsCondition'
    - !Condition '5AZCondition'
  AdditionalPrivateSubnets&6AZCondition: !And
    - !Condition 'AdditionalPrivateSubnetsCondition'
    - !Condition '6AZCondition'
  AdditionalPrivateSubnets&PublicSubnets&NatGatewaysCondition: !And
    - !Condition 'AdditionalPrivateSubnetsCondition'
    - !Condition 'PublicSubnetsCondition'
    - !Condition 'NATGatewaysCondition'
  AdditionalPrivateSubnets&PublicSubnets&NatGateways&3AZCondition: !And
    - !Condition 'AdditionalPrivateSubnets&3AZCondition'
    - !Condition 'PublicSubnetsCondition'
    - !Condition 'NATGatewaysCondition'
  AdditionalPrivateSubnets&PublicSubnets&NatGateways&4AZCondition: !And
    - !Condition 'AdditionalPrivateSubnets&4AZCondition'
    - !Condition 'PublicSubnetsCondition'
    - !Condition 'NATGatewaysCondition'
  AdditionalPrivateSubnets&PublicSubnets&NatGateways&5AZCondition: !And
    - !Condition 'AdditionalPrivateSubnets&5AZCondition'
    - !Condition 'PublicSubnetsCondition'
    - !Condition 'NATGatewaysCondition'
  AdditionalPrivateSubnets&PublicSubnets&NatGateways&6AZCondition: !And
    - !Condition 'AdditionalPrivateSubnets&6AZCondition'
    - !Condition 'PublicSubnetsCondition'
    - !Condition 'NATGatewaysCondition'
  PrivateSubnets&VPCS3EndpointCondition: !And
    - !Condition 'CreatePrivateSubnetsCondition'
    - !Condition 'VPCS3EndpointCondition'
  PrivateSubnets&VPCDynamoDBEndpointCondition: !And
    - !Condition 'CreatePrivateSubnetsCondition'
    - !Condition 'VPCDynamoDBEndpointCondition'
  NATGatewaysCondition: !Equals
    - !Ref 'CreateNATGateways'
    - 'true'
  VPCS3EndpointCondition: !Equals
    - !Ref 'CreateVPCS3Endpoint'
    - 'true'
  VPCDynamoDBEndpointCondition: !Equals
    - !Ref 'CreateVPCDynamoDBEndpoint'
    - 'true'
  CreateVPCFlowLogsCondition: !Equals
    - !Ref 'CreateVPCFlowLogs'
    - 'true'
  NATGateways&3AZCondition: !And
    - !Condition 'NATGatewaysCondition'
    - !Condition '3AZCondition'
  NATGateways&4AZCondition: !And
    - !Condition 'NATGatewaysCondition'
    - !Condition '4AZCondition'
  NATGateways&5AZCondition: !And
    - !Condition 'NATGatewaysCondition'
    - !Condition '5AZCondition'
  NATGateways&6AZCondition: !And
    - !Condition 'NATGatewaysCondition'
    - !Condition '6AZCondition'
  NVirginiaRegionCondition: !Equals
    - !Ref 'AWS::Region'
    - us-east-1
  PrivateSubnetsCondition: !Equals
    - !Ref 'CreatePrivateSubnets'
    - 'true'
  PrivateSubnets&3AZCondition: !And
    - !Condition 'PrivateSubnetsCondition'
    - !Condition '3AZCondition'
  PrivateSubnets&4AZCondition: !And
    - !Condition 'PrivateSubnetsCondition'
    - !Condition '4AZCondition'
  PrivateSubnets&5AZCondition: !And
    - !Condition 'PrivateSubnetsCondition'
    - !Condition '5AZCondition'
  PrivateSubnets&6AZCondition: !And
    - !Condition 'PrivateSubnetsCondition'
    - !Condition '6AZCondition'
  PublicSubnetsCondition: !Equals
    - !Ref 'CreatePublicSubnets'
    - 'true'
  PublicSubnets&3AZCondition: !And
    - !Condition 'PublicSubnetsCondition'
    - !Condition '3AZCondition'
  PublicSubnets&4AZCondition: !And
    - !Condition 'PublicSubnetsCondition'
    - !Condition '4AZCondition'
  PublicSubnets&5AZCondition: !And
    - !Condition 'PublicSubnetsCondition'
    - !Condition '5AZCondition'
  PublicSubnets&6AZCondition: !And
    - !Condition 'PublicSubnetsCondition'
    - !Condition '6AZCondition'
Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !If
        - NVirginiaRegionCondition
        - ec2.internal
        - !Sub '${AWS::Region}.compute.internal'
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: EnableDHCPOption
        - Key: Env
          Value: !Ref 'Env'
        - Key: ServiceType
          Value: Mandatory
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      InstanceTenancy: !Ref 'VPCTenancy'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub 'PracteraCoreVPC-${Env}'
        - Key: Env
          Value: !Ref 'Env'
        - Key: ServiceType
          Value: Mandatory
        - Key: NetworkType
          Value: PrivateVPC
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'VPC'
      DhcpOptionsId: !Ref 'DHCPOptions'
  InternetGateway:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: PublicAccessInternetGateway
        - Key: Env
          Value: !Ref 'Env'
        - Key: ServiceType
          Value: Mandatory
  VPCGatewayAttachment:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PrivateSubnet1A:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet1ACIDR'
      AvailabilityZone: !Select
        - '0'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PrivateSubnet-1A
        - Key: ServiceType
          Value: Mandatory
  PrivateSubnet1B:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet1BCIDR'
      AvailabilityZone: !Select
        - '0'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PrivateSubnet-1B
        - Key: ServiceType
          Value: Optional
  PrivateSubnet2A:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet2ACIDR'
      AvailabilityZone: !Select
        - '1'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PrivateSubnet-2A
        - Key: ServiceType
          Value: Mandatory
  PrivateSubnet2B:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet2BCIDR'
      AvailabilityZone: !Select
        - '1'
        - !Ref 'AvailabilityZones'
  PrivateSubnet3A:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet3ACIDR'
      AvailabilityZone: !Select
        - '2'
        - !Ref 'AvailabilityZones'
  PrivateSubnet3B:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet3BCIDR'
      AvailabilityZone: !Select
        - '2'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PrivateSubnet-3B
        - Key: ServiceType
          Value: Optional
  PrivateSubnet4A:
    Condition: PrivateSubnets&4AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet4ACIDR'
      AvailabilityZone: !Select
        - '3'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PrivateSubnet-4A
        - Key: ServiceType
          Value: Mandatory
  PrivateSubnet4B:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet4BCIDR'
      AvailabilityZone: !Select
        - '3'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PrivateSubnet-4B
        - Key: ServiceType
          Value: Optional
  PrivateSubnet5A:
    Condition: PrivateSubnets&5AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet5ACIDR'
      AvailabilityZone: !Select
        - '4'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PrivateSubnet-5A
        - Key: ServiceType
          Value: Mandatory
  PrivateSubnet5B:
    Condition: AdditionalPrivateSubnets&5AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet5BCIDR'
      AvailabilityZone: !Select
        - '4'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PrivateSubnet-5B
        - Key: ServiceType
          Value: Optional
  PrivateSubnet6A:
    Condition: PrivateSubnets&6AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet6ACIDR'
      AvailabilityZone: !Select
        - '5'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PrivateSubnet-6A
        - Key: ServiceType
          Value: Mandatory
  PrivateSubnet6B:
    Condition: AdditionalPrivateSubnets&6AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet6BCIDR'
      AvailabilityZone: !Select
        - '5'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PrivateSubnet-6B
        - Key: ServiceType
          Value: Optional
  PublicSubnet1:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet1CIDR'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '0'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PublicSubnet-1
        - Key: ServiceType
          Value: Mandatory
  PublicSubnet2:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet2CIDR'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '1'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PublicSubnet-2
        - Key: ServiceType
          Value: Mandatory
  PublicSubnet3:
    Condition: PublicSubnets&3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet3CIDR'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '2'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PublicSubnet-3
        - Key: ServiceType
          Value: Mandatory
  PublicSubnet4:
    Condition: PublicSubnets&4AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet4CIDR'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '3'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PublicSubnet-4
        - Key: ServiceType
          Value: Optional
  PublicSubnet5:
    Condition: PublicSubnets&5AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet5CIDR'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '4'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PublicSubnet-5
        - Key: ServiceType
          Value: Optional
  PublicSubnet6:
    Condition: PublicSubnets&6AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet6CIDR'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '5'
        - !Ref 'AvailabilityZones'
      Tags:
        - Key: Name
          Value: PublicSubnet-6
        - Key: ServiceType
          Value: Optional
  PrivateSubnet1ARouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-1A
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet1ARoute:
    Condition: NATGatewaysCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet1ARouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway1'
  PrivateSubnet1ARouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1A'
      RouteTableId: !Ref 'PrivateSubnet1ARouteTable'
  PrivateSubnet2ARouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-2A
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet2ARoute:
    Condition: NATGatewaysCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet2ARouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway2'
  PrivateSubnet2ARouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2A'
      RouteTableId: !Ref 'PrivateSubnet2ARouteTable'
  PrivateSubnet3ARouteTable:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-3A
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet3ARoute:
    Condition: NATGateways&3AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet3ARouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway3'
  PrivateSubnet3ARouteTableAssociation:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet3A'
      RouteTableId: !Ref 'PrivateSubnet3ARouteTable'
  PrivateSubnet4ARouteTable:
    Condition: PrivateSubnets&4AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-4A
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet4ARoute:
    Condition: NATGateways&4AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet4ARouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway4'
  PrivateSubnet4ARouteTableAssociation:
    Condition: PrivateSubnets&4AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet4A'
      RouteTableId: !Ref 'PrivateSubnet4ARouteTable'
  PrivateSubnet5ARouteTable:
    Condition: PrivateSubnets&5AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-5A
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet5ARoute:
    Condition: NATGateways&5AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet5ARouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway5'
  PrivateSubnet5ARouteTableAssociation:
    Condition: PrivateSubnets&5AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet5A'
      RouteTableId: !Ref 'PrivateSubnet5ARouteTable'
  PrivateSubnet6ARouteTable:
    Condition: PrivateSubnets&6AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-6A
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet6ARoute:
    Condition: NATGateways&6AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet6ARouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway5'
  PrivateSubnet6ARouteTableAssociation:
    Condition: PrivateSubnets&6AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet6A'
      RouteTableId: !Ref 'PrivateSubnet6ARouteTable'
  PrivateSubnet1BRouteTable:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-1B
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet1BRoute:
    Condition: AdditionalPrivateSubnets&PublicSubnets&NatGatewaysCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet1BRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway1'
  PrivateSubnet1BRouteTableAssociation:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1B'
      RouteTableId: !Ref 'PrivateSubnet1BRouteTable'
  PrivateSubnet1BNetworkAcl:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: NACLProtectedSubnet-1B
        - Key: NetworkType
          Value: NACLProtected
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet1BNetworkAclEntryInbound:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref 'PrivateSubnet1BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet1BNetworkAclEntryOutbound:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref 'PrivateSubnet1BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet1BNetworkAclAssociation:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1B'
      NetworkAclId: !Ref 'PrivateSubnet1BNetworkAcl'
  PrivateSubnet2BRouteTable:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-2B
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet2BRoute:
    Condition: AdditionalPrivateSubnets&PublicSubnets&NatGatewaysCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet2BRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway2'
  PrivateSubnet2BRouteTableAssociation:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2B'
      RouteTableId: !Ref 'PrivateSubnet2BRouteTable'
  PrivateSubnet2BNetworkAcl:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: NACLProtectedSubnet-2B
        - Key: NetworkType
          Value: NACLProtected
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet2BNetworkAclEntryInbound:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref 'PrivateSubnet2BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet2BNetworkAclEntryOutbound:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref 'PrivateSubnet2BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet2BNetworkAclAssociation:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2B'
      NetworkAclId: !Ref 'PrivateSubnet2BNetworkAcl'
  PrivateSubnet3BRouteTable:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-3B
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet3BRoute:
    Condition: AdditionalPrivateSubnets&PublicSubnets&NatGateways&3AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet3BRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway3'
  PrivateSubnet3BRouteTableAssociation:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet3B'
      RouteTableId: !Ref 'PrivateSubnet3BRouteTable'
  PrivateSubnet3BNetworkAcl:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: NACLProtectedSubnet-3B
        - Key: NetworkType
          Value: NACLProtected
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet3BNetworkAclEntryInbound:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref 'PrivateSubnet3BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet3BNetworkAclEntryOutbound:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref 'PrivateSubnet3BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet3BNetworkAclAssociation:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet3B'
      NetworkAclId: !Ref 'PrivateSubnet3BNetworkAcl'
  PrivateSubnet4BRouteTable:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-4B
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet4BRoute:
    Condition: AdditionalPrivateSubnets&PublicSubnets&NatGateways&4AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet4BRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway4'
  PrivateSubnet4BRouteTableAssociation:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet4B'
      RouteTableId: !Ref 'PrivateSubnet4BRouteTable'
  PrivateSubnet4BNetworkAcl:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: NACLProtectedSubnet-4B
        - Key: NetworkType
          Value: NACLProtected
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet4BNetworkAclEntryInbound:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref 'PrivateSubnet4BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet4BNetworkAclEntryOutbound:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref 'PrivateSubnet4BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet4BNetworkAclAssociation:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet4B'
      NetworkAclId: !Ref 'PrivateSubnet4BNetworkAcl'
  PrivateSubnet5BRouteTable:
    Condition: AdditionalPrivateSubnets&5AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-5B
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet5BRoute:
    Condition: AdditionalPrivateSubnets&PublicSubnets&NatGateways&5AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet5BRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway5'
  PrivateSubnet5BRouteTableAssociation:
    Condition: AdditionalPrivateSubnets&5AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet5B'
      RouteTableId: !Ref 'PrivateSubnet5BRouteTable'
  PrivateSubnet5BNetworkAcl:
    Condition: AdditionalPrivateSubnets&5AZCondition
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: NACLProtectedSubnet-5B
        - Key: NetworkType
          Value: NACLProtected
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet5BNetworkAclEntryInbound:
    Condition: AdditionalPrivateSubnets&5AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref 'PrivateSubnet5BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet5BNetworkAclEntryOutbound:
    Condition: AdditionalPrivateSubnets&5AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref 'PrivateSubnet5BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet5BNetworkAclAssociation:
    Condition: AdditionalPrivateSubnets&5AZCondition
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet5B'
      NetworkAclId: !Ref 'PrivateSubnet5BNetworkAcl'
  PrivateSubnet6BRouteTable:
    Condition: AdditionalPrivateSubnets&6AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PrivateSubnet-6B
        - Key: NetworkType
          Value: PrivateOnly
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet6BRoute:
    Condition: AdditionalPrivateSubnets&PublicSubnets&NatGateways&6AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet6BRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NATGateway5'
  PrivateSubnet6BRouteTableAssociation:
    Condition: AdditionalPrivateSubnets&6AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet6B'
      RouteTableId: !Ref 'PrivateSubnet6BRouteTable'
  PrivateSubnet6BNetworkAcl:
    Condition: AdditionalPrivateSubnets&6AZCondition
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: NACLProtectedSubnet-6B
        - Key: NetworkType
          Value: NACLProtected
        - Key: Env
          Value: !Ref 'Env'
  PrivateSubnet6BNetworkAclEntryInbound:
    Condition: AdditionalPrivateSubnets&6AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref 'PrivateSubnet6BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet6BNetworkAclEntryOutbound:
    Condition: AdditionalPrivateSubnets&6AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref 'PrivateSubnet6BNetworkAcl'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnet6BNetworkAclAssociation:
    Condition: AdditionalPrivateSubnets&6AZCondition
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet6B'
      NetworkAclId: !Ref 'PrivateSubnet6BNetworkAcl'
  PublicSubnetRouteTable:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: NetworkType
          Value: PublicAccessAllowed
        - Key: Env
          Value: !Ref 'Env'
  PublicSubnetRoute:
    Condition: PublicSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet1RouteTableAssociation:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet2RouteTableAssociation:
    Condition: PublicSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet3RouteTableAssociation:
    Condition: PublicSubnets&3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet3'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet4RouteTableAssociation:
    Condition: PublicSubnets&4AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet4'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet5RouteTableAssociation:
    Condition: PublicSubnets&5AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet5'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet6RouteTableAssociation:
    Condition: PublicSubnets&6AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet6'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  NAT1EIP:
    Condition: NATGatewaysCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    Condition: NATGatewaysCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT3EIP:
    Condition: NATGateways&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT4EIP:
    Condition: NATGateways&4AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT5EIP:
    Condition: NATGateways&5AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway1:
    Condition: NATGatewaysCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT1EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
  NATGateway2:
    Condition: NATGatewaysCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT2EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet2'
  NATGateway3:
    Condition: NATGateways&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT3EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet3'
  NATGateway4:
    Condition: NATGateways&4AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT4EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet4'
  NATGateway5:
    Condition: NATGateways&5AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT5EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet5'
  S3VPCEndpoint:
    Condition: PrivateSubnets&VPCS3EndpointCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref 'PrivateSubnet1ARouteTable'
        - !Ref 'PrivateSubnet2ARouteTable'
        - !If
          - PrivateSubnets&3AZCondition
          - !Ref 'PrivateSubnet3ARouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnets&4AZCondition
          - !Ref 'PrivateSubnet4ARouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnets&5AZCondition
          - !Ref 'PrivateSubnet5ARouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnets&6AZCondition
          - !Ref 'PrivateSubnet6ARouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnetsCondition
          - !Ref 'PrivateSubnet1BRouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnetsCondition
          - !Ref 'PrivateSubnet2BRouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnets&3AZCondition
          - !Ref 'PrivateSubnet3BRouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnets&4AZCondition
          - !Ref 'PrivateSubnet4BRouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnets&5AZCondition
          - !Ref 'PrivateSubnet5BRouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnets&6AZCondition
          - !Ref 'PrivateSubnet6BRouteTable'
          - !Ref 'AWS::NoValue'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref 'VPC'
  DynamoDBVPCEndpoint:
    Condition: PrivateSubnets&VPCDynamoDBEndpointCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref 'PrivateSubnet1ARouteTable'
        - !Ref 'PrivateSubnet2ARouteTable'
        - !If
          - PrivateSubnets&3AZCondition
          - !Ref 'PrivateSubnet3ARouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnets&4AZCondition
          - !Ref 'PrivateSubnet4ARouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnets&5AZCondition
          - !Ref 'PrivateSubnet5ARouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnets&6AZCondition
          - !Ref 'PrivateSubnet6ARouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnetsCondition
          - !Ref 'PrivateSubnet1BRouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnetsCondition
          - !Ref 'PrivateSubnet2BRouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnets&3AZCondition
          - !Ref 'PrivateSubnet3BRouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnets&4AZCondition
          - !Ref 'PrivateSubnet4BRouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnets&5AZCondition
          - !Ref 'PrivateSubnet5BRouteTable'
          - !Ref 'AWS::NoValue'
        - !If
          - AdditionalPrivateSubnets&6AZCondition
          - !Ref 'PrivateSubnet6BRouteTable'
          - !Ref 'AWS::NoValue'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcId: !Ref 'VPC'
  VPCFlowLogIAMRole:
    Condition: CreateVPCFlowLogsCondition
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: flowlogs-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !GetAtt 'VPCFlowLogGroup.Arn'
  VPCFlowLogGroup:
    Condition: CreateVPCFlowLogsCondition
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref 'RetentionInDays'
  VPCFlowLog:
    Condition: CreateVPCFlowLogsCondition
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt 'VPCFlowLogIAMRole.Arn'
      LogGroupName: !Ref 'VPCFlowLogGroup'
      ResourceId: !Ref 'VPC'
      ResourceType: VPC
      TrafficType: !Ref 'TrafficType'
Outputs:
  VPCStack:
    Description: Stack name
    Value: !Sub '${AWS::StackName}'
    Export:
      Name: VPCStack
  NAT1EIP:
    Condition: NATGatewaysCondition
    Description: NAT 1 IP address
    Value: !Ref 'NAT1EIP'
    Export:
      Name: NAT1EIP
  NAT2EIP:
    Condition: NATGatewaysCondition
    Description: NAT 2 IP address
    Value: !Ref 'NAT2EIP'
    Export:
      Name: NAT2EIP
  NAT3EIP:
    Condition: NATGateways&3AZCondition
    Description: NAT 3 IP address
    Value: !Ref 'NAT3EIP'
    Export:
      Name: NAT3EIP
  NAT4EIP:
    Condition: NATGateways&4AZCondition
    Description: NAT 4 IP address
    Value: !Ref 'NAT4EIP'
    Export:
      Name: NAT4EIP
  NAT5EIP:
    Condition: NATGateways&5AZCondition
    Description: NAT 5 IP address
    Value: !Ref 'NAT5EIP'
    Export:
      Name: NAT5EIP
  S3VPCEndpoint:
    Condition: PrivateSubnets&VPCS3EndpointCondition
    Description: S3 VPC Endpoint
    Value: !Ref 'S3VPCEndpoint'
    Export:
      Name: S3VPCEndpoint
  DynamoDBVPCEndpoint:
    Condition: PrivateSubnets&VPCDynamoDBEndpointCondition
    Description: DynamoDB VPC Endpoint
    Value: !Ref 'DynamoDBVPCEndpoint'
    Export:
      Name: DynamoDBVPCEndpoint
  PrivateSubnet1ARouteTable:
    Condition: PrivateSubnetsCondition
    Value: !Ref 'PrivateSubnet1ARouteTable'
    Description: Private subnet 1A route table
    Export:
      Name: PrivateSubnet1ARouteTable
  PrivateSubnet1BRouteTable:
    Condition: AdditionalPrivateSubnetsCondition
    Value: !Ref 'PrivateSubnet1BRouteTable'
    Description: Private subnet 1B route table
    Export:
      Name: PrivateSubnet1BRouteTable
  PrivateSubnet2ARouteTable:
    Condition: PrivateSubnetsCondition
    Value: !Ref 'PrivateSubnet2ARouteTable'
    Description: Private subnet 2A route table
    Export:
      Name: PrivateSubnet2ARouteTable
  PrivateSubnet2BRouteTable:
    Condition: AdditionalPrivateSubnetsCondition
    Value: !Ref 'PrivateSubnet2BRouteTable'
    Description: Private subnet 2B route table
    Export:
      Name: PrivateSubnet2BRouteTable
  PrivateSubnet3ARouteTable:
    Condition: PrivateSubnets&3AZCondition
    Value: !Ref 'PrivateSubnet3ARouteTable'
    Description: Private subnet 3A route table
    Export:
      Name: PrivateSubnet3ARouteTable
  PrivateSubnet3BRouteTable:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Value: !Ref 'PrivateSubnet3BRouteTable'
    Description: Private subnet 3B route table
    Export:
      Name: PrivateSubnet3BRouteTable
  PrivateSubnet4ARouteTable:
    Condition: PrivateSubnets&4AZCondition
    Value: !Ref 'PrivateSubnet4ARouteTable'
    Description: Private subnet 4A route table
    Export:
      Name: PrivateSubnet4ARouteTable
  PrivateSubnet4BRouteTable:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Value: !Ref 'PrivateSubnet4BRouteTable'
    Description: Private subnet 4B route table
    Export:
      Name: PrivateSubnet4BRouteTable
  PrivateSubnet5ARouteTable:
    Condition: PrivateSubnets&5AZCondition
    Value: !Ref 'PrivateSubnet5ARouteTable'
    Description: Private subnet 5A route table
    Export:
      Name: PrivateSubnet5ARouteTable
  PrivateSubnet5BRouteTable:
    Condition: AdditionalPrivateSubnets&5AZCondition
    Value: !Ref 'PrivateSubnet5BRouteTable'
    Description: Private subnet 5B route table
    Export:
      Name: PrivateSubnet5BRouteTable
  PrivateSubnet6ARouteTable:
    Condition: PrivateSubnets&6AZCondition
    Value: !Ref 'PrivateSubnet6ARouteTable'
    Description: Private subnet 6A route table
    Export:
      Name: PrivateSubnet6ARouteTable
  PrivateSubnet6BRouteTable:
    Condition: AdditionalPrivateSubnets&6AZCondition
    Value: !Ref 'PrivateSubnet6BRouteTable'
    Description: Private subnet 6B route table
    Export:
      Name: PrivateSubnet6BRouteTable
  PublicSubnetRouteTable:
    Condition: PublicSubnetsCondition
    Value: !Ref 'PublicSubnetRouteTable'
    Description: Public subnet route table
    Export:
      Name: PublicSubnetRouteTable
  VPCCIDR:
    Value: !Ref 'VPCCIDR'
    Description: VPC CIDR
    Export:
      Name: VPCCIDR
  VPCID:
    Value: !Ref 'VPC'
    Description: VPC ID
    Export:
      Name: VPCID
  VPCFlowLogGroup:
    Condition: CreateVPCFlowLogsCondition
    Description: The name of the CloudWatch Logs log group where Amazon EC2 publishes
      your flow logs.
    Value: !Ref 'VPCFlowLogGroup'
  LogGroupARN:
    Condition: CreateVPCFlowLogsCondition
    Description: The ARN of the CloudWatch Logs log group where Amazon EC2 publishes
      your flow logs.
    Value: !GetAtt 'VPCFlowLogGroup.Arn'
  MasterPublicSubnetIDBasedonAZUsed:
    Condition: PublicSubnetsCondition
    Description: Consolidated Output for all Public subnets to use based on number
      of AZ used
    Value: !If
      - PublicSubnets&6AZCondition
      - !Sub '${PublicSubnet1},${PublicSubnet2},${PublicSubnet3},${PublicSubnet4},${PublicSubnet5},${PublicSubnet6}'
      - !If
        - PublicSubnets&5AZCondition
        - !Sub '${PublicSubnet1},${PublicSubnet2},${PublicSubnet3},${PublicSubnet4},${PublicSubnet5}'
        - !If
          - PublicSubnets&4AZCondition
          - !Sub '${PublicSubnet1},${PublicSubnet2},${PublicSubnet3},${PublicSubnet4}'
          - !If
            - PublicSubnets&3AZCondition
            - !Sub '${PublicSubnet1},${PublicSubnet2},${PublicSubnet3}'
            - !Ref 'AWS::NoValue'
    Export:
      Name: MasterPublicSubnetIDBasedonAZUsed
  MasterPrivateSubnetIDBasedonAZUsed:
    Condition: PrivateSubnetsCondition
    Description: Consolidated Output for all default private subnets to use based
      on number of AZ used
    Value: !If
      - PrivateSubnets&6AZCondition
      - !Sub '${PrivateSubnet1A},${PrivateSubnet2A},${PrivateSubnet3A},${PrivateSubnet4A},${PrivateSubnet5A},${PrivateSubnet6A}'
      - !If
        - PrivateSubnets&5AZCondition
        - !Sub '${PrivateSubnet1A},${PrivateSubnet2A},${PrivateSubnet3A},${PrivateSubnet4A},${PrivateSubnet5A}'
        - !If
          - PrivateSubnets&4AZCondition
          - !Sub '${PrivateSubnet1A},${PrivateSubnet2A},${PrivateSubnet3A},${PrivateSubnet4A}'
          - !If
            - PrivateSubnets&3AZCondition
            - !Sub '${PrivateSubnet1A},${PrivateSubnet2A},${PrivateSubnet3A}'
            - !Ref 'AWS::NoValue'
    Export:
      Name: MasterPrivateSubnetIDBasedonAZUsed
  MasterAdditonalPrivateSubnetIDBasedonAZUsed:
    Condition: AdditionalPrivateSubnetsCondition
    Description: Consolidated Output for additonal private subnets to use based on
      number of AZ used
    Value: !If
      - AdditionalPrivateSubnets&6AZCondition
      - !Sub '${PrivateSubnet1B},${PrivateSubnet2B},${PrivateSubnet3B},${PrivateSubnet4B},${PrivateSubnet5B},${PrivateSubnet6B}'
      - !If
        - AdditionalPrivateSubnets&5AZCondition
        - !Sub '${PrivateSubnet1B},${PrivateSubnet2B},${PrivateSubnet3B},${PrivateSubnet4B},${PrivateSubnet5B}'
        - !If
          - AdditionalPrivateSubnets&4AZCondition
          - !Sub '${PrivateSubnet1B},${PrivateSubnet2B},${PrivateSubnet3B},${PrivateSubnet4B}'
          - !If
            - AdditionalPrivateSubnets&3AZCondition
            - !Sub '${PrivateSubnet1B},${PrivateSubnet2B},${PrivateSubnet3B}'
            - !Ref 'AWS::NoValue'
    Export:
      Name: MasterAdditonalPrivateSubnetIDBasedonAZUsed
  PrivateSubnetsAvailableList:
    Condition: PrivateSubnetsCondition
    Description: List of all available and created Private subnet to use for DB and
      other AWS private resoruces
    Export:
      Name: PrivateSubnetsAvailableList
    Value: !If
      - AdditionalPrivateSubnetsCondition
      - !If
        - AdditionalPrivateSubnets&6AZCondition
        - !Sub '${PrivateSubnet1A},${PrivateSubnet1B},${PrivateSubnet2A},${PrivateSubnet2B},${PrivateSubnet3A},${PrivateSubnet3B},${PrivateSubnet4A},${PrivateSubnet4B},${PrivateSubnet5A},${PrivateSubnet5B},${PrivateSubnet6A},${PrivateSubnet6B}'
        - !If
          - AdditionalPrivateSubnets&5AZCondition
          - !Sub '${PrivateSubnet1A},${PrivateSubnet1B},${PrivateSubnet2A},${PrivateSubnet2B},${PrivateSubnet3A},${PrivateSubnet3B},${PrivateSubnet4A},${PrivateSubnet4B},${PrivateSubnet5A},${PrivateSubnet5B}'
          - !If
            - AdditionalPrivateSubnets&4AZCondition
            - !Sub '${PrivateSubnet1A},${PrivateSubnet1B},${PrivateSubnet2A},${PrivateSubnet2B},${PrivateSubnet3A},${PrivateSubnet3B},${PrivateSubnet4A},${PrivateSubnet4B}'
            - !If
              - AdditionalPrivateSubnets&3AZCondition
              - !Sub '${PrivateSubnet1A},${PrivateSubnet1B},${PrivateSubnet2A},${PrivateSubnet2B},${PrivateSubnet3A},${PrivateSubnet3B}'
              - !Ref 'AWS::NoValue'
      - !If
        - PrivateSubnets&6AZCondition
        - !Sub '${PrivateSubnet1A},${PrivateSubnet2A},${PrivateSubnet3A},${PrivateSubnet4A},${PrivateSubnet5A},${PrivateSubnet6A}'
        - !If
          - PrivateSubnets&5AZCondition
          - !Sub '${PrivateSubnet1A},${PrivateSubnet2A},${PrivateSubnet3A},${PrivateSubnet4A},${PrivateSubnet5A}'
          - !If
            - PrivateSubnets&4AZCondition
            - !Sub '${PrivateSubnet1A},${PrivateSubnet2A},${PrivateSubnet3A},${PrivateSubnet4A}'
            - !If
              - PrivateSubnets&3AZCondition
              - !Sub '${PrivateSubnet1A},${PrivateSubnet2A},${PrivateSubnet3A}'
              - !Ref 'AWS::NoValue'
