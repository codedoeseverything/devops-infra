AWSTemplateFormatVersion: '2010-09-09'

Description: This is master cloudformation template for core Practera infrastructure
  design

Metadata:

  Authors:
    Description: Sunil and Mihai (sunil@practera.com/mihai@practera.com) based on
      AWS quickstart/widdix and best practise.
  License:
    Description: Copyright 2020 Intersective PTY LTD and its affiliates. All Rights
      Reserved.

Parameters:

  CFNS3BucketName:
    Description: S3 bucket name for the Cloudformation template stored. This string
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Default: devops-cfn-templates
    Type: String
  CFNS3BucketRegion:
    Default: ap-southeast-2
    Description: The AWS Region where the Cloudformation template stored in S3 bucket
      is hosted. When using your own bucket, you must specify this value.
    Type: String
  StackName:
    ConstraintDescription: This will be unique string to represent our stack.
    Default: beta
    Description: A client/project/product unique name for the stack to idnetify later.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens
      (-). It cannot start or end with a hyphen (-).
    Type: String
    AllowedValues: [au,us,uk,p2,lf,nu,alpha,beta]
  Env:
    Description: Environment type.
    Default: stage
    Type: String
    AllowedValues:
      - sandbox
      - stage
      - live
    ConstraintDescription: must specify sandbox,stage,live.
  NumberOfAZs:
    AllowedValues:
      - '1'
      - '2'
      - '3'
      - '4'
      - '5'
      - '6'
    Default: '3'
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  DefaultRouteAccess:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: CIDR IP range that is permitted to access the bastions. We recommend
      that you set this value to a trusted IP range.
    Type: String
  NumBastionHosts:
    AllowedValues:
      - '1'
      - '2'
      - '3'
      - '4'
    Default: '1'
    Description: The number of bastion hosts to create. The maximum number is four.
    Type: String
  BastionAMIOS:
    Type : "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    Description: Linux distribution for the AMI to be used for the bastion instances.
  BastionInstanceType:
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    Default: t2.nano
    Description: Amazon EC2 instance type for the bastion instances.
    Type: String
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the SSH bastion host/instance.'
    Type: AWS::EC2::KeyPair::KeyName
    Default: ''
  VPCInterfaceServiceName:
    Description: 'The name of the service supported for VPC interface endpoint'
    Type: String
  CreateChatBotStackCondition:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Set to false to not create AWS chat Bot stack
    Type: String
  CreateNATGatewayStackCondition:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Set to false to not create AWS NATGatewayStack
    Type: String
  ChatBotConfigurationName:
    Description: A Slack Configuration Name
    Type: String
  ChatBotLoggingLevel:
    Description: A Cloudwatch Logging level
    Type: String
  SlackChannelId:
    Description: A Slack Channel ID 
    Type: String
  SlackWorkspaceId:
    Description: A Slack Workspace ID 
    Type: String

Conditions:
  CreateChatBotStackCondition: !Equals
      - !Ref 'CreateChatBotStackCondition'
      - 'true'
  CreateNATGatewayStackCondition: !Equals
      - !Ref 'CreateNATGatewayStackCondition'
      - 'true'


Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${CFNS3BucketName}.s3.${CFNS3BucketRegion}.amazonaws.com/${StackName}/cfn-templates/vpc.yml'
      Parameters:
        StackName: !Ref 'StackName'
        Env: !Ref 'Env'
        NumberOfAZs: !Ref 'NumberOfAZs'
        ClassB: !Ref 'ClassB'
  SecurityGroupStack:
    DependsOn: [VPCStack]
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${CFNS3BucketName}.s3.${CFNS3BucketRegion}.amazonaws.com/${StackName}/cfn-templates/security-group.yml'
      Parameters:
        StackName: !Ref 'StackName'
        Env: !Ref 'Env'
        DefaultRouteAccess: !Ref 'DefaultRouteAccess'
  SNSSlackAlertStack:
    DependsOn: [VPCStack]
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${CFNS3BucketName}.s3.${CFNS3BucketRegion}.amazonaws.com/${StackName}/cfn-templates/sns-slack.yml'
      Parameters:
        StackName: !Ref 'StackName'
        Env: !Ref 'Env'
  AWSChatBotSlackStack:
    Condition: CreateChatBotStackCondition
    DependsOn: [SNSSlackAlertStack]
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${CFNS3BucketName}.s3.${CFNS3BucketRegion}.amazonaws.com/${StackName}/cfn-templates/chatbot.yml'
      Parameters:
        StackName: !Ref 'StackName'
        Env: !Ref 'Env'
        ChatBotConfigurationName: !Ref 'ChatBotConfigurationName'
        ChatBotLoggingLevel: !Ref 'ChatBotLoggingLevel'
        SlackChannelId: !Ref 'SlackChannelId'
        SlackWorkspaceId: !Ref 'SlackWorkspaceId'
  # BastionServerStack:
  #   DependsOn: [VPCStack, SecurityGroupStack, SNSSlackAlertStack]
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub 'https://${CFNS3BucketName}.s3.${CFNS3BucketRegion}.amazonaws.com/${StackName}/cfn-templates/bastion.yml'
  #     Parameters:
  #       StackName: !Ref 'StackName'
  #       Env: !Ref 'Env'
  #       KeyName: !Ref 'KeyName'
  #       BastionAMIOS: !Ref 'BastionAMIOS'
  #       NumBastionHosts: !Ref 'NumBastionHosts'
  #       BastionInstanceType: !Ref 'BastionInstanceType'
  NATGatewayStack:
    Condition: CreateNATGatewayStackCondition
    DependsOn: [VPCStack]
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${CFNS3BucketName}.s3.${CFNS3BucketRegion}.amazonaws.com/${StackName}/cfn-templates/nat-gateway.yml'
      Parameters:
        StackName: !Ref 'StackName'
        Env: !Ref 'Env'
        NumberOfAZs: !Ref 'NumberOfAZs'
  VPCEndpointInterfaceStack:
    DependsOn: [VPCStack, SecurityGroupStack]
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${CFNS3BucketName}.s3.${CFNS3BucketRegion}.amazonaws.com/${StackName}/cfn-templates/vpc-endpoints.yml'
      Parameters:
        StackName: !Ref 'StackName'
        Env: !Ref 'Env'
        VPCInterfaceServiceName: !Ref 'VPCInterfaceServiceName'
  # NATGatewayAlarmStack:
  #   Condition: CreateNATGatewayStackCondition
  #   DependsOn: [NATGatewayStack, SNSSlackAlertStack]
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub 'https://${CFNS3BucketName}.s3.${CFNS3BucketRegion}.amazonaws.com/${StackName}/cfn-templates/nat-gateway-alarm.yml'
  #     Parameters:
  #       StackName: !Ref 'StackName'
  #       Env: !Ref 'Env'
  #       NumberOfAZs: !Ref 'NumberOfAZs'
  
 
        