AWSTemplateFormatVersion: '2010-09-09'
Description: This is VPC NAT Gateway cloudformation template for core Practera infrastructure
  design.
Metadata:
  Authors:
    Description: Sunil and Mihai (sunil@practera.com/mihai@practera.com) based on
      AWS quickstart/widdix and best practise.
  License:
    Description: Copyright 2020 Intersective PTY LTD and its affiliates. All Rights
      Reserved.

Parameters:
  StackName:
    ConstraintDescription: This will be unique string to represent our stack.
    Default: sandbox
    Description: A client/project/product unique name for the stack to idnetify later.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens
      (-). It cannot start or end with a hyphen (-).
    Type: String
    AllowedValues: [au,us,uk,p2,lf,nu,sandbox,stage]
  Env:
    Description: Environment type.
    Default: stage
    Type: String
    AllowedValues:
      - sandbox
      - stage
      - live
  NumberOfAZs:
    AllowedValues:
      - '3'
      - '4'
      - '5'
      - '6'
    Default: '3'
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String

Conditions:
  3AZCondition: !Or
    - !Equals
      - !Ref 'NumberOfAZs'
      - '3'
    - !Condition '4AZCondition'
  4AZCondition: !Or
    - !Equals
      - !Ref 'NumberOfAZs'
      - '4'
    - !Condition '5AZCondition'
  5AZCondition: !Or
    - !Equals
      - !Ref 'NumberOfAZs'
      - '5'
    - !Condition '6AZCondition'
  6AZCondition: !Equals
    - !Ref 'NumberOfAZs'
    - '6'

Resources:
  EIPA:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGatewayA:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPA.AllocationId'
      SubnetId: {'Fn::ImportValue': !Sub '${StackName}-SubnetAPublic-${Env}'}
  RouteA:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: {'Fn::ImportValue': !Sub '${StackName}-RouteTableAPrivate-${Env}'}
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA
  EIPB:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGatewayB:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPB.AllocationId'
      SubnetId: {'Fn::ImportValue': !Sub '${StackName}-SubnetBPublic-${Env}'}
  RouteB:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: {'Fn::ImportValue': !Sub '${StackName}-RouteTableBPrivate-${Env}'}
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayB
  EIPC:
    Condition: 3AZCondition
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGatewayC:
    Condition: 3AZCondition
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPC.AllocationId'
      SubnetId: {'Fn::ImportValue': !Sub '${StackName}-SubnetCPublic-${Env}'}
  RouteC:
    Condition: 3AZCondition
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: {'Fn::ImportValue': !Sub '${StackName}-RouteTableCPrivate-${Env}'}
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayC
  EIPD:
    Condition: 4AZCondition
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGatewayD:
    Condition: 4AZCondition
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPD.AllocationId'
      SubnetId: {'Fn::ImportValue': !Sub '${StackName}-SubnetDPublic-${Env}'}
  RouteD:
    Condition: 4AZCondition
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: {'Fn::ImportValue': !Sub '${StackName}-RouteTableDPrivate-${Env}'}
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayD
  EIPE:
    Condition: 5AZCondition
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGatewayE:
    Condition: 5AZCondition
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPE.AllocationId'
      SubnetId: {'Fn::ImportValue': !Sub '${StackName}-SubnetEPublic-${Env}'}
  RouteE:
    Condition: 5AZCondition
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: {'Fn::ImportValue': !Sub '${StackName}-RouteTableEPrivate-${Env}'}
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayE
  EIPF:
    Condition: 6AZCondition
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGatewayF:
    Condition: 6AZCondition
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPF.AllocationId'
      SubnetId: {'Fn::ImportValue': !Sub '${StackName}-SubnetFPublic-${Env}'}
  RouteF:
    Condition: 6AZCondition
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: {'Fn::ImportValue': !Sub '${StackName}-RouteTableFPrivate-${Env}'}
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayF
  
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  NatGatewayA:
    Description: 'NatGatewayA ID'
    Value: !Ref NatGatewayA
    Export:
      Name: !Sub '${StackName}-NatGatewayA-${Env}'
  NatGatewayB:
    Description: 'NatGatewayB ID'
    Value: !Ref NatGatewayB
    Export:
      Name: !Sub '${StackName}-NatGatewayB-${Env}'
  NatGatewayC:
    Condition: 3AZCondition
    Description: 'NatGatewayC ID'
    Value: !Ref NatGatewayC
    Export:
      Name: !Sub '${StackName}-NatGatewayC-${Env}'
  NatGatewayD:
    Condition: 4AZCondition
    Description: 'NatGatewayD ID'
    Value: !Ref NatGatewayD
    Export:
      Name: !Sub '${StackName}-NatGatewayD-${Env}'
  NatGatewayE:
    Condition: 5AZCondition
    Description: 'NatGatewayE ID'
    Value: !Ref NatGatewayE
    Export:
      Name: !Sub '${StackName}-NatGatewayE-${Env}'
  NatGatewayF:
    Condition: 6AZCondition
    Description: 'NatGatewayF ID'
    Value: !Ref NatGatewayF
    Export:
      Name: !Sub '${StackName}-NatGatewayF-${Env}'