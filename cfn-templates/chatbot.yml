AWSTemplateFormatVersion: '2010-09-09'

Description: This is AWS CHATBOT SLACK Notify cloudformation template for core Practera infrastructure
  design.

Metadata:

  Authors:
    Description: Sunil and Mihai (sunil@practera.com/mihai@practera.com) based on
      AWS quickstart/widdix and best practise.
  License:
    Description: Copyright 2020 Intersective PTY LTD and its affiliates. All Rights
      Reserved.

Parameters:
  StackName:
    ConstraintDescription: This will be unique string to represent our stack.
    Default: beta
    Description: A client/project/product unique name for the stack to idnetify later.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens
      (-). It cannot start or end with a hyphen (-).
    Type: String
    AllowedValues: [au,us,uk,p2,lf,nu,alpha,beta,shared]
  Env:
    Description: Environment type.
    Default: stage
    Type: String
    AllowedValues:
      - sandbox
      - stage
      - live
    ConstraintDescription: must specify sandbox,stage,live.
  ChatBotConfigurationName:
    Description: A Slack Configuration Name
    Type: String
  ChatBotLoggingLevel:
    Description: A Cloudwatch Logging level
    Type: String
  SlackChannelId:
    Description: A Slack Channel ID 
    Type: String
  SlackWorkspaceId:
    Description: A Slack Workspace ID 
    Type: String
  AllowReadOnlyAndSupportPolicyArns:
    Description: 'Optional comma-delimited list of IAM managed policy ARNs to attach to the instance''s IAM role'
    Type: String
    Default: 'arn:aws:iam::aws:policy/ReadOnlyAccess,arn:aws:iam::aws:policy/AWSSupportAccess'
  AllowLambdaInvokeForChatBot:
    Description: 'Enable AWS Lambda Invoke Access for chatbot.'
    Type: String
    Default: true
    AllowedValues:
    - true
    - false

Conditions:
  AllowLambdaInvokeForChatBot: !Equals [!Ref AllowLambdaInvokeForChatBot, 'true']
  AllowReadOnlyAndSupportPolicyArns: !Not [!Equals [!Ref AllowReadOnlyAndSupportPolicyArns, '']]

Resources:
  TestChatbot:
    Type: AWS::Chatbot::SlackChannelConfiguration
    Properties: 
      ConfigurationName: !Ref ChatBotConfigurationName
      LoggingLevel: !Ref ChatBotLoggingLevel
      SlackChannelId: !Ref SlackChannelId
      SlackWorkspaceId: !Ref SlackWorkspaceId
      IamRoleArn: !GetAtt ChatbotIamRole.Arn
      SnsTopicArns: 
        - {'Fn::ImportValue': !Sub '${StackName}-ChatBotSNSTopicARN-${Env}'}
        - {'Fn::ImportValue': !Sub '${StackName}-FallbackSNSTopicARN-${Env}'}


  ChatbotIamRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${StackName}-chatbot-iam-role-${Env}'
      # RoleName: !Sub '${StackName}-chatbot-iam-role-${Env}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: chatbot.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: !If [AllowReadOnlyAndSupportPolicyArns, !Split [',', !Ref AllowReadOnlyAndSupportPolicyArns], !Ref 'AWS::NoValue']
      Policies:
      - !If
        - AllowReadOnlyAndSupportPolicyArns
        - PolicyName: !Sub '${StackName}-Deny-ReadOnlyPolicy-${Env}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Deny
              Action:
              - iam:*
              - s3:GetBucketPolicy
              - ssm:*
              - sts:*
              - kms:*
              - cognito-idp:GetSigningCertificate
              - ec2:GetPasswordData
              - ecr:GetAuthorizationToken
              - gamelift:RequestUploadCredentials
              - gamelift:GetInstanceAccess
              - lightsail:DownloadDefaultKeyPair
              - lightsail:GetInstanceAccessDetails
              - lightsail:GetKeyPair
              - lightsail:GetKeyPairs
              - redshift:GetClusterCredentials
              - storagegateway:DescribeChapCredentials
              Resource:
              - "*"
        - !Ref 'AWS::NoValue'
      - !If
        - AllowLambdaInvokeForChatBot
        - PolicyName: !Sub '${StackName}-AllowLambdaInvokeForChatBot-${Env}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - lambda:invokeAsync
              - lambda:invokeFunction
              Resource:
              - "*"
        - !Ref 'AWS::NoValue'
  LogsNotificationOnly:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
      - !Ref ChatbotIamRole
      PolicyName: !Sub '${StackName}-LogsNotificationOnly-${Env}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cloudwatch:Describe*
          - cloudwatch:Get*
          - cloudwatch:List*
          Resource:
          - "*"