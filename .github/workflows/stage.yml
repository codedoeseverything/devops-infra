# GitHub Actions WorkFlow Name

name: Release to Staging environment

#Event Trigger for this Workflow

on:
  workflow_dispatch:
  push:
    # branches: [ 'trunk' ]
    branches: [ 'develop' ]
    

#Jobs to perform based on event occurred
 
jobs:
  release-stage:
    name: release-stage
    runs-on: ubuntu-latest

    #Global Env variables declare here
    env:
      REGION : ap-southeast-2
      ENV : stage # Valid values are sandbox,stage,live only
      STACK_NAME: beta # Valid values are au,us,uk,p2,lf,nu,alpha,beta only
      SUBDOMAIN: devops-infra
      CFNS3BucketName: devops-cfn-templates1
      S3BucketNameKeyPair: devops-ec2-keypair1
      LOGGING_LEVEL: INFO  #ERROR, INFO, or NONE.
      ISZONEEXIST: true  #false, true.
      P1PUBLICZONEID: 
      PUBLICZONENAME: sub.quicktest.com
      PRIVATEZONENAME: internal.sub.quicktest.com
      PUBLICZONEID: Z04615941B2RGJA39TBRM


    # Steps to execute in this job
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis


      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

          
      - name: Cache Python dependencies
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.pythonLocation}}/lib/python3.8/site-packages/*
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-


      - name: Install Python dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing dependencies and caching them."
          pip install -r requirements.txt

      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      
 
      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-node-modules
        env:
          cache-name: cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-


      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run:  npm install
      

      # - name: Run cloudformation template Lint test using cfn-lint
      #   run: |
      #     pip install cfn-lint==0.44.4
      #     cfn-lint -i W2001 W8001 W4002 W6001 -t '**/*.yml'
      
      
      - name: Run cloudformation template static analysis test using cfn-nag
        uses: stelligent/cfn_nag@master
        with:
          input_path: cfn-templates
          extra_args: --fail-on-warnings -o json --blacklist-path .cfn_nag_blacklist.yml


      - name: Create additional cloudformation parameters for stack deployment
        run: |
          cat >> config/cfn.params <<EOF 
          StackName=${{ env.STACK_NAME }}
          Env=${{ env.ENV }}
          KeyName=${{ env.STACK_NAME }}-${{ env.REGION }}
          CFNS3BucketName=${{ env.CFNS3BucketName }}
          CFNS3BucketRegion=ap-southeast-2
          ChatBotConfigurationName=${{ env.STACK_NAME }}-ChatBotSlackNotify-${{ env.ENV }}
          ChatBotLoggingLevel=${{ env.LOGGING_LEVEL }}
          Route53HostedZoneExist=${{ env.ISZONEEXIST }}
          PublicHostedZoneName=${{ env.PUBLICZONENAME }}
          PrivateHostedZoneName=${{ env.PRIVATEZONENAME }}
          PublicHostedZoneId=${{ env.PUBLICZONEID }}

          EOF

      
      - name: Create additional cloudformation tags for stack deployment
        run: |
          cat >> config/cfn.tags <<EOF 
          StackName=${{ env.STACK_NAME }}
          Env=${{ env.ENV }}
          RootStack=${{ env.SUBDOMAIN }}
          EOF
         

      - name: Convert JSON format cloudformation parameters and tags for stack deployment
        run: |
          python3 scripts/cfn-param-json-convert.py config/cfn.params
          python3 scripts/cfn-param-json-convert.py config/cfn.tags


      - name: Configure AWS credentials from ${{ env.STACK_NAME }} account in ${{ env.REGION }} region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_AWS_KEY }}
          aws-secret-access-key: ${{ secrets.DEVOPS_SECRET_KEY }}
          aws-region: ${{ env.REGION }}

      
      - name: Create AWS EC2 Key Pair Name for ${{ env.STACK_NAME }} account in ${{ env.REGION }} region if not exist
        run: chmod +x scripts/ec2-key-pair.sh && scripts/ec2-key-pair.sh
        env:
          EC2KEYPAIR: ${{ env.STACK_NAME }}-${{ env.REGION }}


      - name: AWS S3 Sync operation
        run: |
          aws s3 sync cfn-templates/ s3://${{env.CFNS3BucketName}}/${{env.STACK_NAME}}/cfn-templates --delete


      - name: Create or Update cloudformation templates to AWS
        run: |
          python3 scripts/cfn-create-update.py ${{ env.STACK_NAME }}-${{ env.SUBDOMAIN }} cfn-templates/main.yml config/cfn-params.json config/cfn-tags.json
      

      - name: Export CFN output values only if ISZONEEXIST is false
        if: env.ISZONEEXIST == 'false'
        run: |
          export DN=${{ env.STACK_NAME }}-PublicHostedZoneId-${{ env.ENV }}
          export NS=${{ env.STACK_NAME }}-PublicHostedZoneNSRecord-${{ env.ENV }}
          echo "PUBLICZONEID="$(aws cloudformation list-exports --query "Exports[?Name==\`$DN\`].Value" --no-paginate --output text) >> $GITHUB_ENV
          echo "PUBLICZONENSRECORD="$(aws cloudformation list-exports --query "Exports[?Name==\`$NS\`].Value" --no-paginate --output text) >> $GITHUB_ENV
      

      
      - name: Export AWS Account ID
        run: |
          export ID=${{ env.STACK_NAME }}-AccountID-${{ env.ENV }}
          echo "ACCOUNTID="$(aws cloudformation list-exports --query "Exports[?Name==\`$ID\`].Value" --no-paginate --output text) >> $GITHUB_ENV


      - name: Configure AWS credentials from P1 AU account in ${{ env.REGION }} region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_AWS_KEY }}
          aws-secret-access-key: ${{ secrets.DEVOPS_SECRET_KEY }}
          aws-region: ${{ env.REGION }}


      - name: P1 Dependency Resource creation using Serverless
        if: env.ISZONEEXIST == 'false'
        run: |
          mv serverless-p1-dependency.yml serverless.yml
          node_modules/.bin/serverless deploy
          rm serverless.yml
        env:
          P1PUBLICZONEID: Z04615941B2RGJA39TBRM


      # - name: P1 Dependency Resource creation using script for ECR Push and Pull access
      #   run: |
      #     chmod +x ecr-push-pull-access-p1.sh && ./ecr-push-pull-access-p1.sh
      #   env:
      #     ACCOUNTID: ${{ env.ACCOUNTID }}
      
      
      # - name: Configure AWS credentials from ${{ env.STACK_NAME }} account in ${{ env.REGION }} region
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.DEVOPS_AWS_KEY }}
      #     aws-secret-access-key: ${{ secrets.DEVOPS_SECRET_KEY }}
      #     aws-region: ${{ env.REGION }}


      # - name: Serverless ACM cert creation
      #   run: |
      #     mv serverless-acm.yml serverless.yml
      #     node_modules/.bin/serverless create-cert && node_modules/.bin/serverless deploy

       

      - name: Slack Notification
        if: always() # Pick up events even if the job fails or is canceled.
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }} # required
        with:
          status: ${{ job.status }}
          author_name: ${{ env.SUBDOMAIN }} deployed to ${{ env.ENV }} environemnt in ${{ env.STACK_NAME }} AWS account
          mention: 'here'
          if_mention: failure,cancelled
          job_name: release-stage # Match the name above.
          fields: repo,commit,eventName,ref,workflow,message,author,job,took
          custom_payload: |
            {
            username: 'GitHub Action CI WorkFlow',
            icon_emoji: ':github:',
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : ${{ job.status }}' === 'failure' ? 'danger' : 'warning',
              text:
             `${process.env.AS_REPO}\n
              ${process.env.AS_COMMIT}\n
              ${process.env.AS_EVENT_NAME}\n
              @${process.env.AS_REF}\n
              @${process.env.AS_WORKFLOW}\n
              ${process.env.AS_MESSAGE}\n
              ${process.env.AS_AUTHOR}\n
              ${process.env.AS_JOB}\n
              ${process.env.AS_TOOK}`,
            }]
            }